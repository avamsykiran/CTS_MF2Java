Day 1: Java Introduction
----------------------------------------------------------------------------------------

    is a high level strictly but partially object oriented progrmming.

    + Strictly object oriented, as there is no way possible to implement any java application 
      without using OOP.,
    + Partially object oriented, as java supports native variables and native types which are
      not objects and classes

    Histroy And Evolution
    ----------------------------------------
    JDK Alpha and Beta (1995)
    JDK 1.0 (23rd Jan 1996)
    JDK 1.1 (19th Feb 1997)
    J2SE 1.2 (8th Dec 1998)                             Stable  
    J2SE 1.3 (8th May 2000)
    J2SE 1.4 (6th Feb 2002)                             Stable and Prominent
    J2SE 5.0 (30th Sep 2004)                            Stable, Prominent and Revolutionary
    Java SE 6 (11th Dec 2006)
    Java SE 7 (28th July 2011)
    Java SE 8 (18th Mar 2014)   (LTS)                   Stable and Most used on current day 
    Java SE 9 (21st Sep 2017)
    Java SE 10 (20th Mar 2018)
    Java SE 11 (Sep 2018)       (LTS)                   Stable and being adopted 
    Java SE 12 (Mar 2019)
    Java SE 13 (Sep 2019)
    Java SE 14 (Mar 2020)
    Java SE 15 (Sep 2020)
    
    Java Distributions
        JRE                 Java Runtime Environment         
                                {Java Libraries,GC,JVM,Interpreter,ClassLoader,ByteCodeVerifeir,...}
        
        JDK / JSDK          Java (Standard) Development Kit    
                                {JRE, Development Tools, IDE Support}
    
    Java Editions

        Java Standard Edition 
        ==================================
                Core Language                
                Java Core Libraries
                -------------------------
                    java.lang               Exceptions, Multi-Threading
                    java.time               Date and Time API
                    java.util               Generics and Collections
                    java.util.stream        Streams API and Lambda Expressions
                    java.util.regex         Regular Expressions
                    java.io                 IO Streams
                    java.nio                New IO Streams
                    java.sql                JDBC

        Java Enterprise Edition
        ==================================
            App                 Specificaions            Implementations         Frameworks
            ----                -----------------------  ----------------        -------------
            Dynamic Web Apps    Servlets and JSP         WebServers like Tomcat  Struts
                                                                                  Spring

            ORM                 JPA, JTA                 Hibernate,TopLink,EclipseLink...
                    
            WebServices         JAX-WS, JAX-RS           Axis2,Apache CXF
                                          
            Microservices ...and more

        Java Micro Edition
        ==================================

                supports smart device / smart card based application development.


    Characteristics
    ----------------------------------------

    1: Each statement shall be terminated by a ;

        System.out.println("");

        Stream<String> = Stream.of(
                            "a","b","c","d","e","f","g"
                         );

    2: Strictly Case Sensitive

    3: Each block of statements shall be enclosed wihtin  { .... }

            static {
                System.out.println("");

                Stream<String> = Stream.of(
                                    "a","b","c","d","e","f","g"
                                );        
            }

    4: Object Oriented

    Features
    ------------------------------------------
    Simple
    Robust
    Multi-Threaded
    Distributed
    Self-Documented
    Platform Independent
    Archetecture Neutral

Day2
----------------------------------------------------------------------------------------
    
    Tokens
    -----------------------------
        
        Keywords                    lower cased

        Operators

                        Binary Operators

                                Arithmetic
                                        +       Addition            sum
                                        -       Substraction        diff
                                        *       Multiplication      prod
                                        /       Division            Quitiont

                                            7/2     3
                                            7/2.0   3.5
                                            7.0/2.0 3.5
                                            7.0/2.0 3.5

                                        %       Division-Modulo     Reminder

                                Assignemnt

                                    =
                                                a =5;
                                                a = c+b;
                                                a = Math.min(45,657);

                                    +=,-=,/=,*=,%=

                                    a+=5;           a = a+5;

                                Relational

                                        ==, < , >, <=, >=, != 

                                Logical

                                        and     &&
                                        or      ||
                                        not     !

                                        boolean flag = a>b && b>c;
                                        boolean flag = a>b || b>c;
                                        boolean flag1 = !flag2;

                        Unary Operators
                                    -       unary minus

                                    a = v1-v2; //bianry -
                                    a = -b; //unarity - 

                                    ++      increment
                                    --      decrement

                                    int v1=78;
                                    int v2 = ++v1;                                   

                        Ternary Pair Operator     

                            rel_or_logical_expression ? expression_on_true : expression_on_false

                            int b=-109,c=0;
                            int a = b>=c?b:c;

                            value of a is 0.

                            if(b>=c){
                                a=b;
                            }else{
                                a=c;
                            }

                        Bitwise Operators

                                &       
                                |       
                                ^
                                <<
                                >>

                        Misc

                                instance of
                                ()                  function calls, type casting
                                []                  arrays 
                                {}                  block of code
                                                    initilizations
                                ;                   statement termination
                                <>                  type inferences
                                ::                  scope resolution
                                .                   memebership operator

        Comments

                    End of line comment
                    //

                    Block Comments
                    /*

                    */

                    /*
                     This class represents the detials of an Employee
                     .......................
                    */
                    class Employee{

                        private int empNumber;      //represents the employee identitiy
                        private String empName;     //represents employee full name
                        private double basic;       //represents employee basic pay
                        
                    }

        Identifiers             (Nouns)

                is any name given to a resource like variable,method,class,interfae ..etc

                1. Identifiers can be alpha numeric but can not start with a number
                        int a1,a2; //valid
                        int 1a;//invlaid

                2. Identifiers cna not compose of any symbole expect _ .

                        int MIN_COUNT;

                3. Identifiers can not fully match with a keyword

                        int intValue; //valid
                        int if; //invalid

                Naming Conventions
                ===================================


                1. variable, Objects and Method Identifiers

                    start with lowercase and follow initial capitals 
                    from the second word onwards


                    length
                    roomLength

                    emp
                    empToBeDelted

                    compare()
                    compareTo()
                    equals()
                    equalsIgnoreCase()

                2. User Defiend Data Type (class/interface/enum) Identifiers

                    Always follow initial capitals.

                    Employee
                    Exception
                    ArrayIndexOutOfBoundsException

                3. Identifiers given to Constants

                    All capitals and word are linked with a _ .

                    MIN_LIMIT
                    MAX_LIMIT
                    PI

        Literals

    Coding Standards And Conventions