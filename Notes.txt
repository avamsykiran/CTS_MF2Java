Day 1: Java Introduction
----------------------------------------------------------------------------------------

    is a high level strictly but partially object oriented progrmming.

    + Strictly object oriented, as there is no way possible to implement any java application 
      without using OOP.,
    + Partially object oriented, as java supports native variables and native types which are
      not objects and classes

    Histroy And Evolution
    ----------------------------------------
    JDK Alpha and Beta (1995)
    JDK 1.0 (23rd Jan 1996)
    JDK 1.1 (19th Feb 1997)
    J2SE 1.2 (8th Dec 1998)                             Stable  
    J2SE 1.3 (8th May 2000)
    J2SE 1.4 (6th Feb 2002)                             Stable and Prominent
    J2SE 5.0 (30th Sep 2004)                            Stable, Prominent and Revolutionary
    Java SE 6 (11th Dec 2006)
    Java SE 7 (28th July 2011)
    Java SE 8 (18th Mar 2014)   (LTS)                   Stable and Most used on current day 
    Java SE 9 (21st Sep 2017)
    Java SE 10 (20th Mar 2018)
    Java SE 11 (Sep 2018)       (LTS)                   Stable and being adopted 
    Java SE 12 (Mar 2019)
    Java SE 13 (Sep 2019)
    Java SE 14 (Mar 2020)
    Java SE 15 (Sep 2020)
    
    Java Distributions
        JRE                 Java Runtime Environment         
                                {Java Libraries,GC,JVM,Interpreter,ClassLoader,ByteCodeVerifeir,...}
        
        JDK / JSDK          Java (Standard) Development Kit    
                                {JRE, Development Tools, IDE Support}
    
    Java Editions

        Java Standard Edition 
        ==================================
                Core Language                
                Java Core Libraries
                -------------------------
                    java.lang               Exceptions, Multi-Threading
                    java.time               Date and Time API
                    java.util               Generics and Collections
                    java.util.stream        Streams API and Lambda Expressions
                    java.util.regex         Regular Expressions
                    java.io                 IO Streams
                    java.nio                New IO Streams
                    java.sql                JDBC

        Java Enterprise Edition
        ==================================
            App                 Specificaions            Implementations         Frameworks
            ----                -----------------------  ----------------        -------------
            Dynamic Web Apps    Servlets and JSP         WebServers like Tomcat  Struts
                                                                                  Spring

            ORM                 JPA, JTA                 Hibernate,TopLink,EclipseLink...
                    
            WebServices         JAX-WS, JAX-RS           Axis2,Apache CXF
                                          
            Microservices ...and more

        Java Micro Edition
        ==================================

                supports smart device / smart card based application development.


    Characteristics
    ----------------------------------------

    1: Each statement shall be terminated by a ;

        System.out.println("");

        Stream<String> = Stream.of(
                            "a","b","c","d","e","f","g"
                         );

    2: Strictly Case Sensitive

    3: Each block of statements shall be enclosed wihtin  { .... }

            static {
                System.out.println("");

                Stream<String> = Stream.of(
                                    "a","b","c","d","e","f","g"
                                );        
            }

    4: Object Oriented

    Features
    ------------------------------------------
    Simple
    Robust
    Multi-Threaded
    Distributed
    Self-Documented
    Platform Independent
    Archetecture Neutral

Day2
----------------------------------------------------------------------------------------
    
    Tokens and Coding Standards And Conventions
    ----------------------------------------------------------
        
        Keywords                    lower cased

        Operators

                        Binary Operators

                                Arithmetic
                                        +       Addition            sum
                                        -       Substraction        diff
                                        *       Multiplication      prod
                                        /       Division            Quitiont

                                            7/2     3
                                            7/2.0   3.5
                                            7.0/2.0 3.5
                                            7.0/2.0 3.5

                                        %       Division-Modulo     Reminder

                                Assignemnt

                                    =
                                                a =5;
                                                a = c+b;
                                                a = Math.min(45,657);

                                    +=,-=,/=,*=,%=

                                    a+=5;           a = a+5;

                                Relational

                                        ==, < , >, <=, >=, != 

                                Logical

                                        and     &&
                                        or      ||
                                        not     !

                                        boolean flag = a>b && b>c;
                                        boolean flag = a>b || b>c;
                                        boolean flag1 = !flag2;

                        Unary Operators
                                    -       unary minus

                                    a = v1-v2; //bianry -
                                    a = -b; //unarity - 

                                    ++      increment
                                    --      decrement

                                    int v1=78;
                                    int v2 = ++v1;                                   

                        Ternary Pair Operator     

                            rel_or_logical_expression ? expression_on_true : expression_on_false

                            int b=-109,c=0;
                            int a = b>=c?b:c;

                            value of a is 0.

                            if(b>=c){
                                a=b;
                            }else{
                                a=c;
                            }

                        Bitwise Operators

                                &       
                                |       
                                ^
                                <<
                                >>

                        Misc

                                instance of
                                ()                  function calls, type casting
                                []                  arrays 
                                {}                  block of code
                                                    initilizations
                                ;                   statement termination
                                <>                  type inferences
                                ::                  scope resolution
                                .                   memebership operator

        Comments

                    End of line comment
                    //

                    Block Comments
                    /*

                    */

                    /*
                     This class represents the detials of an Employee
                     .......................
                    */
                    class Employee{

                        private int empNumber;      //represents the employee identitiy
                        private String empName;     //represents employee full name
                        private double basic;       //represents employee basic pay
                        
                    }

        Identifiers             (Nouns)

                is any name given to a resource like variable,method,class,interfae ..etc

                1. Identifiers can be alpha numeric but can not start with a number
                        int a1,a2; //valid
                        int 1a;//invlaid

                2. Identifiers cna not compose of any symbole expect _ .

                        int MIN_COUNT;

                3. Identifiers can not fully match with a keyword

                        int intValue; //valid
                        int if; //invalid

                Naming Conventions
                ===================================


                1. variable, Objects and Method Identifiers

                    start with lowercase and follow initial capitals 
                    from the second word onwards


                    length
                    roomLength

                    emp
                    empToBeDelted

                    compare()
                    compareTo()
                    equals()
                    equalsIgnoreCase()

                2. User Defiend Data Type (class/interface/enum) Identifiers

                    Always follow initial capitals.

                    Employee
                    Exception
                    ArrayIndexOutOfBoundsException

                3. Identifiers given to Constants

                    All capitals and word are linked with a _ .

                    MIN_LIMIT
                    MAX_LIMIT
                    PI

Day 3:
----------------------------------------------------------------------------------------------

        Literals
        -----------------------------------------------

            int c = 2*PI*radius;

            keyword             int
            identifiers         radius,PI,c
            operators           = * ;
            comments
            Literals            2


            Numeric
                        Integer

                            Decimal Numdric System      0 to 9

                                    int x = 72;
                                    System.out.println(x);      72

                            HexaDecimal Numberic System 0 to 9 ,A to F

                                    int x = 0xFF9;
                                    System.out.println(x);      4089

                            Octal Numberic System       0 to 7

                                    int x = 072;
                                    System.out.println(x);      58

                            Binary Numberic System       0 and 1

                                    int x = 0b1101;
                                    System.out.println(x);      13                                    

                        Floating Pointing
                                Decimal Numdric System      0 to 9

                                    double d = 89.0;
                                    float f = 90.0f;

            Non-Numeric

                        Characters

                            char alpha1 = 'a';

                        String
                            String name=   "MF2Java Batch";

                            System.out.println("Hello Batch");

                        Boolean

                            true
                            false

                        Reference

                            null


        Java Type System
        --------------------------------------

                Primitive Type

                    char        2B

                    byte        1B
                    short       2B
                    int         4B
                    long        8B

                    double      8B
                    float       4B

                    void        ----
                    boolean     1 bit       true and false

                Reference Type / User Defined Data Types

                    class
                    enum
                    interface


        Developing An application
        -----------------------------------

            Compose the source code                         TextEditor (notpead...)
            Compile the source code                         javac Program.java    
            Test the Source code or the compiled files      -----------
            Package them                                    jar
            
            Build the application (Compiling, linking, 
            minimizing and package)

            Execute Application                             java 
            
            Deploy

            Generate Docuementation                         javadoc

            Read Documentation                              javap

        

Day 4:
----------------------------------------------------------------------------

Decison Making Control Statements

    Simple if
                    if(cond)
                        statement;

                    if(cond){
                        statement;
                    }

    if..else
                    if(cond){
                        true block of statements;
                    }else {
                        false block of statements;
                    }

    if laddder
                    if(cond1){
                        block1;
                    }else if(cond2){
                        block2;
                    }........................
                    .....else{
                        block if non of the statments are true;
                    }

    nested if

    switch

Iterative Control Statmeents

    do..while
    while
    for
    Enhanced for

Day 5:
----------------------------------------------------------------------------

    Arrays
    -----------------------------------------------------

            datatype[] arrName; //declaration
            datatype arrName[]; //declaration
            
            arrName = new datatype[size]; //allocation

            datatype[] arrName = new datatype[size]; //declaration and allocation
            datatype arrName[] = new datatype[size]; //declaration and allocation

            datatype[] arrName = new datatyoe[]{e1,e2,e3,e4........};


            for(loopingVar : array){
                ...loopingVar...
            }    


            value based allocations
            reference based allocations


            int x=90; //value based allocations

            int arr[];

            arr = new int[3]; //reference based allocation

            int arr2 = arr;

                                Stack                       Heap
                                                                r1    r2   r3
                                                                [   ][  ][  ]
                                    x [ 90 ]

                                    arr [  r1  ]
                                    arr2[  r1  ]


            Develop a java applciation
                1. to declare an array of 15 elements;
                2. then initilize that array with elements from 1 to 15.
                3. then compute and display
                        a) the smallest
                        b) the largest
                        c) sum
                        d) avg.
        ===================================================================================

        Object Oriented Programming

                    is  a programming paradigm.

            Class & Object
            Encapsulation
            Polymorphisim
            Inheretence
            Abastraction                    


        Class 
                is a user defiend datatype; to represent the 
                real time entities in terms of properties and behaviours.
                Properties are represetned by variables called fields.
                behaviours are represented by functions called methods.


                class Employee{
                    private int empId;
                    private String empName;

                    public Employee(int empId,String empName){
                        this.empid=empid;
                        this.empNAme=empName;
                    }
                }

        Object    memory allocated (variables) of type class.  

                int n = 105;

                Employee emp1 = new Employee(101,"Vamsy");
                Employee emp2 = new Employee(101,"Vamsy");

                Employee emp3;

                Employee emp3 = emp2;

                boolean flag1 = (emp1==emp2); //false
                boolean flag2 = (emp3==emp2); //true

                
        Encapsulation  --- data hiding


                Access Specifiers
                -----------------------
                    can not use on a local variable 
                    or a function arguament

                    public              public datatype varaible;

                            on a class      the class is accessable outside its package
                            on a field      are accessable any where outide the class.
                            on a method     are accessable any where outide the class.
                                            

                    private             private datatype varaible;
                    
                            on a field      are accessable only from within the class.
                            on a method     are accessable only from within the class.
                            
                    protected           protected datatype varaible;

                            on a field      are accessable from within the class and also sub-classes.
                            on a method     are accessable from within the class and also sub-classes.

                    default             datatype varaible;

                            default class

                                    classes that are not public are default class.
                                    and these can not be accessed from outside its package.

                            default field
                            default method

                                    are accessable from all classes 
                                    that belong to the same package of the
                                    owning class.


                public class Employee {
                    
                    private int empId;
                    private String fullName;
                    private double basicPay;

                    public int getEmpId(){
                        return empId;
                    }

                    public void setEmpId(int empId){
                        this.empId=empId;
                    }

                }



                





